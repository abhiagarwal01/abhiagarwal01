---
title: "Surviving OMSCS for dummies"
description: "I came into OMSCS as someone with no formal programming experience. Here are the reviews of the classes I took."
author: "Abhi Agarwal"
date: "2024-03-05"
categories: [omscs]
---

# Introduction

Let me acknowledge the clickbait: I'm not actually a dummy by any means, as much as I love to self-deprecate. I graduated from a "prestigious" liberal arts college with a degree in mathematics, economics, and physics. I decided to become a software engineer because I ended up really liking money. I applied to OMSCS as a method to learn more — and to also make myself look more employable and thus get more money. Shallow, sure, but I'd rather be honest with you. I'm entirely self-taught, having learned C++ from a family friend at the ripe age of 12^[which probably qualifies as cruel and unusual punishment per the Geneva Conventions]. I learned Python to help me do my math homework in high school and write silly little scripts. I've picked up a few languages like R, Stata^[against my will], Rust, C# as I've wanted to expand my mind. I've always suffered from a healthy dose of imposter syndrome, OMSCS is my attempt to satiate this issue.

This is a diary of the classes I took in OMSCS, and how I felt about them, from the prespective of someone with very little formal programming experience. I wanted to document how OMSCS can feel for someone who is only one year removed from academia, but with little academic experience in software engineering. I will periodically update this throughout the years. Enjoy!

# Semester 1 (Spring 2024)

I decided to take two classes my first semester. In retrospect, this was probably a little bit foolish, and definitely not recommended. I've gone by whole life by doing things that are probably too hard to do to satiate my ego, and this was no exception. There is no real difference with spreading out your OMSCS tenure, despite paying the fixed technology fee per semester. You may have guessed by now, but since I love money, I hate spending it, so that informed my decision-making here. 

## GIOS

If you don't care about my soapboxing, see my overall review here @sec-gios-review. 

GIOS was the class I was most excited to take. I've always had a self-imposed inferiority complex about being a "high-level guy", as I've always wanted to be a "low-level guy". I think my negative first experience with C++, where I nearly cried trying to implement Tic-Tac-Toe when I was 12, gave me a pretty big mental block. I figured GIOS was the best way to overcome this, as it provides a structured environment for me to actually learn a little bit more about the "low-level".

I was right! This class helped me realize that the distinction between "low-level" and "high-level" is pretty arbitrary, in that many of the python constructs I was familiar with using were just higher-level wrappers over the low-level things. The low-level is just kinda mucky for no reason, in that we're stuck with the design decisions made by people with good intentions. 

### Project 1

Project 1 was awesome. It was my first real time writing C, and the first time in my life I actually cared about a buffer overflow in practice. And boy, did I learn to care about buffer overflows. The actual project concept itself was not difficult — I could've written the entire thing in Python in a couple hours — but caring about "the low level" was where things got pretty hard. I spent 80% of my time guarding against buffer overflows or use after frees or whatever, things I took for granted my entire life and by abstractions in other higher-level languages.

The slack was super helpful. I had one issue I couldn't figure out that someone in the Slack answered within a few seconds (which turned out to be a question so common it had its own post on Piazza). I spent the past few days before the end on the Slack helping other people with their implementations. It gets a little bit lonely when you don't see your classmates in person, but around half of my college experience was like that due to COVID anyways so I've been successfully stockholm syndrome'd into liking it. 

### Midterm

I bombed the midterm. This is definitely one of the hubris things. 

### Project 3
**Author's Note: I never got any explanation for why there isn't a Project 2.**

Project 3 may have been the most fun I've had on anything in my academic career. 

### Overall Review {#sec-gios-review}

## ML4T

todo!()
