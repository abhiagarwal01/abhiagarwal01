---
title: "Reverse-engineering a private API to build a high-quality Python package"
description: "PFF, the gold standard for NFL analytics, does not provide easy access to extract their data. This article describes how I found their internal APIs and turned it into a strongly-typed and opionionated Python package"
author: "Abhi Agarwal"
date: "2023-04-30"
categories: [nfl, python]
draft: true
---

# Introduction

The world of sports data and analytics is becoming an increasingly prominent field. Sports are fundamentally a zero-sum game, meaning every edge you have can be the difference between carrying a trophy and going home. A popular avenue for sports data for America's most common popular is Pro-Football-Focus (PFF), who employ analysts who watch every single player on every single play by watching film to assign a numerical grade measuring a player's performance. Football is a sport where 22 people on the field influence a play, but often only two-to-four of those players have their action recorded in the official game log. PFF aims to solve this problem. PFF's imputed statistics have shown to be as stable or more than advanced play-by-play based data such as EPA/play and DVOA.

PFF sells a subscription providing access to their database. However, this is only accessible through browser, and it fails to provide export functionality except for a select few datasets. When doing longitudinal data analysis, this can be frustrating and limiting. I wrote my economics thesis primarily using PFF data, and I can tell you that scraping the data took me weeks of time that could have been spent writing and conducting research. There has to be a better way.

And there is! By using some rudimentary reverse-engineering techniques, I was able to create a fully functioning python library that provides thoughtful abstractions to underlying PFF data, with *zero scraping*. This article serves as a documentation of how I was able to solve this problem, the design decisions I took, and wall as an informal guide for how you can also try and solve these kind of problems in the wild.

# The naive approach with `BeautifulSoup`

The first instinct when attempting to automate the collection of any sort of online content is to use the python library [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) to parse HTML. Let's take a look at an example PFF page[^1].

[^1]: Since PFF's grading is properitary data, I wrote a quick and dirty javascript script that randomizes all the grades to be 1-100.

![https://premium.pff.com/nfl/teams/2022/REGPO](assets/images/pff_screenshot_team_overview.png)

This is tabular, so well suited for `BeautifulSoup`. Let's try and write an implementation to parse this out.

```{python}
def hello_world() -> str:
    return "Hello World"

hello_world()
```

# Reverse-engineering the API

# Creating a Python package

Dependency management in python is hell. Much like the classic xckd, there's a million different tools and all the attempts to unify said tools have only created the n+1 tool. I prefer using `poetry` --- it reminds me most of `cargo`, although it currently isn't compliant with [PEP-621](https://peps.python.org/pep-0621/).

There are a few developer tools I include with every single project: `black` for formatting, `ruff` for linting, `mypy` for static type-checking[^2]. Let's add those too:

[^2]: For 99% of projects, I recommend `pyright` over `mypy`. I'm only using the latter because `pydantic` has a plugin that allows `mypy` to understand its sematics.

``` {.zsh filename="Terminal"}
poetry add --group dev black ruff mypy
```

And in our `pyproject.toml`, let's set up some defaults.

``` {.toml filename="pyproject.toml"}
[tool.ruff]
line-length = 120
target-version = "py38"
select = ["ALL"]
ignore = [
    "TCH", # pydantic run-time type checking is needed
    "D100" # I don't want to
]
src = ["pypff", "test"]

[tool.ruff.isort]
known-first-party = ["pypff"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 120

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true
```

::: {.callout-note collapse="true"}
### Why I don't use `pre-commit`
`pre-commit` is a popular tool for ensuring that tests, linting, formatting, etc. is done before as a git hook before comitting your code. I'm not a big fan of its design. I heavily dislike the way it runs tools, essentially pulling the tool from the internet and running it in an isolated environment. It seems like unncessary duplication given my dev tools are already installed in my venv, and also requires you to take care that the version number in the `pre-commit` config matches the declared version in `pyproject.toml`, which gets tedious fast. I prefer using CI as my source of truth. 
:::

While this stuff may seem trivial, setting up a good tooling environment is vital. Python is a deeply complicated beast, and not a single human alive has the capacity to write good, maintainable code without someone holding your hand and slapping you if you're wrong. By declaring your dev tools in your manifest, it creates a reproducible environment so any person in the world can immediately start contributing to your project. We've given the responsibilities to the impartial computer, no one has to argue anymore about stylistic checks. 

## Mirroring the API through directory structure

I'd like to preface this by saying this is the dumbest and most brilliant thing I've ever done.

## Using `pydantic` to control data structure

`Pydantic` is one of my favorite Python libraries, and broadly, represents everything I love about Python. It provides a safe and robust way to take data, validate it, and transform it into the desired output. The API I'm working with is *not* be trusted --- it could change at any moment with zero notice, and Python's flexibility could shoot us in the foot by letting us propogate faulty data to library users. Pydantic provides a mechanism to ensure that we prioritize **correctness** for our library consumers.

For example of where `pydantic` can increase the quality of our library, let's take a look at an example JSON payload.

``` {.json include="assets/code/leagues_payload.json"}
```

Our data is a heavily nested structure, meaning that if a library consumer wants to manipulate this data, they also need to know *how* the data is structured. This is a herculean task for anyone, and drastically decreases the time spent actually conducting analysis. In addition, since our payload is intended for the PFF website, they include properties like `default_week` or `display_order` for the frontend that is completely irrelevant to us. We want to hide those details from our library users.

Here's how I'd model this JSON through Pydantic models.

```{python .python}
from pydantic import BaseModel, Field

class WeekGroup(BaseModel):
    default: bool = Field(exclude=True)
    group_name: str = Field(alias="label")
    group_abbreviation: str = Field(alias="value")
    weeks: list[int]

class Week(BaseModel):
    week_abbreviation: str = Field(alias="abbreviation")
    all_star: bool
    display_order: int = Field(exclude=True)
    week_number: int = Field(alias="id")
    week_name: str = Field(alias="name")
    post_season: bool
    pre_season: bool
    regular_season: bool

class League(BaseModel):
    league_abbreviation: str = Field(alias="abbreviation")
    default_season: int = Field(exclude=True)
    default_week: int = Field(exclude=True)
    default_week_group: str = Field(exclude=True)
    league_id: int = Field(alias="id")
    league_name: str = Field(alias="name")
    seasons: list[int]
    slug: str = Field(exclude=True)
    week_groups: list[WeekGroup]
    weeks: list[Week]
```

This breaks down our complex JSON into an easily understandable block of Python. I use the `pydantic.dataclasses` feature as a drop-in replacement for the standard python `dataclass`, so people using the library are more familiar with its semantics. By using the `Field` property, we're able to exclude certain elements in the model output while still ensuring they exist for correctness purposes. We're able to turn a plain integer into a strongly-typed integer `WeekNum` that preserves its meaning and allows for introducing additional validation if desired. And perhaps most importantly, we've now broken up our JSON payload into composable parts --- let's say another endpoint uses `WeekGroup` in its output (spoiler: it does), we can just import this `WeekGroup` and get the same exact semantics for free.

If you couldn't tell, I freaking *love* pydantic.

As a test, let's take our JSON payload and convert it into a Pydantic model.

```{python}
from pathlib import Path
from rich.pretty import pprint
import json
from IPython.display import display

json_payload = json.loads((Path(".") / "assets" / "code" / "leagues_payload.json").read_text())

from pydantic.analyzed_type import AnalyzedType

parsed_model = AnalyzedType(list[League]).validate_python(json_payload["leagues"])
pprint(parsed_model[0].model_dump())
```

## (Ab)using polymorphism

My first language was C++, so I've been proudly stockholm-syndromed into loving object-oriented paradigms, especially polymorphism. And although a simple API client doesn't seem to tend itself well to composition, by exploiting common data structures, we can turn our library into a composition of composed models being composited with composed models.

## To Async, or to Sync[^3]

[^3]: *Try saying this 10 times fast*

I want to talk about the topic I dread the most about python: the `async` problem. We are taught to reason about code in a synchronous way, but modern computers have multiple cores and thus the ability to multitask --- asynchronous execution runs code in a way that our computers can optimize. Python has a relatively new mechanism to provide different semantics for these tasks --- `async` --- but it comes with its own pitfalls.

As a library author, there are three approaches I can take here:

### Async-only library

With the async version, we provide the "correct" API, but Async code *infects* other code as when you call an async call, all your code up the stack **must** be async. This is known as the [function coloring problem](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/). This wouldn't be a huge problem if the Python community had async habits, but unfortunately the functionality was tacked onto python years into its lifecycle, so most code assumes a sync context^[Just from personal experience in the sports data science community, I have yet to see a single use of async in the wild.]. I want people to use this library, I'd be losing active consumers who choose not to bother rewriting all their code. In addition, I want this package to be accessible to R users, and
`reticulate` currently [does not support async execution](https://github.com/rstudio/reticulate/issues/515). 

As much as I dream of a world where pure async is feasible, we're not there yet.

### Sync-only library

Providing a purely synchronous library is the easiest solution, but we're leaving performance on the table. Our library is just a HTTP client, which provides the majority of the time spent, with a few levels of abstraction on top. This may not seem like a big problem, up until you're running multiple requests in a loop to pull data from multiple years, in which case your execution time can exponentially increases.

### Porque no los dos?

Alright, but what if we tried to mix both variants and provide both an asynchronous and synchronous API! Unfortunately, it's not easy as it seems. We'd have to maintain two different sets of APIs --- that increases maintiance costs and violates DRY, as well as increasing the likelihood that the two variants go out of sync^[heh] if we change any code. We can try to maintain one API and provide a wrapper that translates a call into its partner, but that requires spawning a new event loop that likely has a run-time cost that we're trying to avoid in the first place.

### My solution

Oh yes, you guessed it, I'm gonna solve this problem with *more* polymorphism. And the solution is relatively easy — on our `Endpoint` class, let's just define a `get_async()` method that does the exact same thing as `get()` except, well, async. Because of the way we structured our original class, we can just copy-paste `get()`, use `httpx.AsyncClient()` instead, sprinkle in an `await` whenever VSCode complains, and we've added async functionality completely for free on every single one of our endpoints with about 5 lines of code.

## Building an opinionated library

Using this, we now have a decidingly unopinionated and *boring* API. If we know the location of an endpoint and the parameters we want, we can pull that exact data pretty easily. But most people don't have the time to dig through documentation to read every single parameter, what they want is a way for them to be able to quickly iterate

## Writing documentation with `sphinx`

I come from a non-traditional programming background. I graduated with a degree in Mathematics and Economics, and didn't have any formal or educational programming experience outside of messing with a few hobbyist Python scripts[^6]. I picked up my programming skills from reading technical blogs. I once heard an adage, that's probably popular in programming circles, that stuck with me deeply about the nature of code.

[^6]: and writing Stata, which I'd rather not talk about.

[**It's harder to read code than to write it**](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/)

I was able to read some old shitty C++ code I wrote eight years ago and knew exactly what it meant. I can ensure you, dear reader, that you would not be able to. We write code so other people can figure out what the fuck we're doing.

## Testing, CI, Building, and Publishing

# We do a little bit of Analysis

We have our library! `pypff` is live.

I prefer using `ggplot2` as my graphing library, so I'll be conducting the majority of my analysis in R using the `tidyverse` ecosystem. Don't worry if you don't understand R, the tidyverse ecosystem is designed around having composable syntax.

# A note on ethics

The ethics of API scraping is a difficult topic. This package enables access to the exact same data exposed on the PFF website, albeit in a more programatic way. Is there anything illegal about it? Absolutely not. Is it against PFF's Terms of Service? I'm not sure, but as it's currently written, I'm leaning on "no". However, good etiquette is paramount, don't spam the website with requests and use your `sleep()` functions liberally.

# Conclusion

When writing a python library, we need to prioritize two things --- **abstraction** and **correctness**. We want to ensure that our consumers are able to reason about the API in a way that fits their intutition, and also want to provide them with a promise that what they're expecting to see is exactly what they're going to get.