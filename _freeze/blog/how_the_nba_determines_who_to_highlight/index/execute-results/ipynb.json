{
  "hash": "bff27f25f616038b5d22069173022bcd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"How does the NBA choose which players they highlight?\"\ndescription: \"On the NBA Youtube Page, the NBA selects one player from each team to \\\"highlight\\\" each game. I use perceptual hashing to match players onto their youtube highlights, and then model the problem using a Discrete Choice logistic model.\"\nauthor: \"Abhi Agarwal\"\ndate: \"2024-03-15\"\ncategories: [python, nba]\nfreeze: true\nfilters:\n  - optimize-images\ndraft: true\n---\n\n\n\n\n\n\n# Introduction\n\nThe NBA, for years, has published highlight videos on their YouTube channel. Spurned by the popularity of channels such as \"FreeDawkins\", the NBA aims to satisfy the appetites of young people with short attention spans who can't be damned to watch the game.\n\nEach highlight video thumbnail features one player from each team, the away team on the left and the home team on the right.\n\nBut how does the NBA choose who to highlight? Presumably, there's they look at the box scores and figure out who had the \"best game\". Said art is subjective by nature, and I'd imagine it's not an equal process, in that some players, due to their stature, may be highlighted more than they deserve.\n\nIn this project, I first create a dataset for these highlights by using image hashing techniques to match each highlight thumbnail to the player it's representing. I then construct a discrete choices model to measure *how* the NBA chooses who to highlight.\n\n# Getting the data we're interested in\n\nWe're interested in two sets of data. We want to connect the box score data, along with the highlight data. We have to mix in a bunch of techniques in here.\n\n## Youtube data\n\nLet's get the youtube data first. Here's the playlists, where the NBA has thankfully recorded most of the games.\n\n```{.python}\nhighlight_playlists = {\n    \"2020\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVlr5GAksVQA37IE83MzRqln\",\n    \"2021\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkIjURb-twQc1lsE4rT1wfJ\",\n    \"2022\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVm4_E_faSFuu3nU0F9O6XbR\",\n    \"2023\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkAiuNG6gXxaUgjekofxxgs\",\n    \"2024\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkxr3RnRwVqtuWR7BSBE0tD\",\n}\n```\n\nUsing `pytubefix` (a fork of pytube), we can get every single video from this and their details:\n\n```{.python}\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nfrom typing import Any\nfrom pytubefix import YouTube, Playlist\nfrom pytubefix.exceptions import PytubeFixError\nimport shelve\nfrom pathlib import Path\nfrom rich.progress import Progress\n\nworking_dir = Path(__file__).parent / \"data\"\n\nhighlight_playlists = {\n    \"2020\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVlr5GAksVQA37IE83MzRqln\",\n    \"2021\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkIjURb-twQc1lsE4rT1wfJ\",\n    \"2022\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVm4_E_faSFuu3nU0F9O6XbR\",\n    \"2023\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkAiuNG6gXxaUgjekofxxgs\",\n    \"2024\": \"https://www.youtube.com/playlist?list=PLlVlyGVtvuVkxr3RnRwVqtuWR7BSBE0tD\",\n}\n\n\ndef po_token_verifier() -> tuple[str, str]:\n    PO_TOKEN = \"MnQuZmvGMxz-LC5e5e1D06JcspAJg8vXa1nGhNd287tQDuEJp3GC1OX8A79vvjB7DeOhO2iJidzJB1WKD9KF8LR1qWDRLGhEV-Ms-9PsN3XJKJWtzgTOwGM8joYXQ4QBxKDywXvjisECsztSJoi7gGLMyEPsJw==\"\n    VISITOR_DATA = \"Cgt1ZnQ2eDE0NWRqZyjz9aK6BjIKCgJVUxIEGgAgXg%3D%3D\"\n    return (VISITOR_DATA, PO_TOKEN)\n\n\nall_videos_pickle = working_dir / \"all_videos.pkl\"\nif all_videos_pickle.exists():\n    all_videos: list[YouTube] = pickle.loads(all_videos_pickle.read_bytes())\nelse:\n    print(\"Downloading videos in playlist...\")\n    all_videos = []\n    for playlist_url in highlight_playlists.values():\n        videos = [\n            video\n            for video in Playlist(\n                playlist_url, use_po_token=True, po_token_verifier=po_token_verifier\n            ).videos\n        ]\n        all_videos.extend(videos)\n    all_videos_pickle.write_bytes(pickle.dumps(all_videos))\n    print(\"Downloaded videos\")\nprint(f\"Video count = {len(all_videos)}\")\n\n\ndef get_video_details(video: YouTube) -> tuple[Any, ...]:\n    return (video.title, video.views, video.thumbnail_url, video.publish_date)\n\n\ndef add_details(db: shelve.Shelf, videos: list[YouTube]) -> None:\n    with ThreadPoolExecutor() as executor, Progress() as progress:\n        task = progress.add_task(\"videos\", total=len(videos))\n        future_to_video = {}\n        for video in videos:\n            vid_id = video.video_id\n            if vid_id in db:\n                #progress.console.print(f\"Skipping {vid_id}\")\n                progress.advance(task, 1)\n                continue\n            future = executor.submit(get_video_details, video)\n            future_to_video[future] = vid_id\n\n        for future in as_completed(future_to_video):\n            vid_id = future_to_video[future]\n            try:\n                details = future.result()\n                progress.console.print(f\"Adding {vid_id}\")\n                db[vid_id] = details\n            except PytubeFixError as e:\n                print(f\"Error processing video {vid_id}: {e}\")\n                continue\n            except Exception as e:\n                print(f\"Unexpected error with video {vid_id}: {e}\")\n                continue\n            finally:\n                progress.advance(task, 1)\n\n\nprint(\"Opening shelf with data\")\nwith shelve.open(working_dir / \"vid_details\") as db:\n    add_details(db, all_videos)\n\n```\n\nI ran this script outside the notebook, but it works! Now, let's read the data, and convert it into a polars dataframe:\n\n::: {#0b9e1c20 .cell execution_count=1}\n``` {.python .cell-code}\nimport shelve\nfrom pathlib import Path\nimport polars as pl\n\nshelf_path = Path(\"data/vid_details\")\n\nwith shelve.open(shelf_path, \"r\") as db:\n  rows = [(key,) + val for key, val in dict(db).items()]\n\nvideo_df = pl.DataFrame(\n    rows, schema=[\"vid_id\", \"title\", \"views\", \"thumbnail\", \"publish_date\"], orient=\"row\"\n)\nvideo_df.write_parquet(\"data/vid_details.parquet\")\ndisplay(video_df)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (6_195, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>vid_id</th><th>title</th><th>views</th><th>thumbnail</th><th>publish_date</th></tr><tr><td>str</td><td>str</td><td>i64</td><td>str</td><td>datetime[μs]</td></tr></thead><tbody><tr><td>&quot;046ws2SfuL0&quot;</td><td>&quot;THUNDER at PACERS | FULL GAME …</td><td>141419</td><td>&quot;https://i.ytimg.com/vi/046ws2S…</td><td>2021-04-22 01:30:32</td></tr><tr><td>&quot;q9bFgN-J4uY&quot;</td><td>&quot;SUNS at NUGGETS | FULL GAME HI…</td><td>671110</td><td>&quot;https://i.ytimg.com/vi/q9bFgN-…</td><td>null</td></tr><tr><td>&quot;0S2C1zvxmQQ&quot;</td><td>&quot;HORNETS at CAVALIERS | FULL GA…</td><td>747308</td><td>&quot;https://i.ytimg.com/vi/0S2C1zv…</td><td>null</td></tr><tr><td>&quot;MGQE3475CUk&quot;</td><td>&quot;CELTICS at PELICANS | FULL GAM…</td><td>136781</td><td>&quot;https://i.ytimg.com/vi/MGQE347…</td><td>null</td></tr><tr><td>&quot;g19ZkFyT9UI&quot;</td><td>&quot;KINGS at GRIZZLIES | FULL GAME…</td><td>105542</td><td>&quot;https://i.ytimg.com/vi/g19ZkFy…</td><td>2021-11-29 01:28:30</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Luf7EVdBfhA&quot;</td><td>&quot;Devin Booker GOES OFF For 44 P…</td><td>30218</td><td>&quot;https://i.ytimg.com/vi/Luf7EVd…</td><td>null</td></tr><tr><td>&quot;P-w7Sh1c3TM&quot;</td><td>&quot;MAGIC at HAWKS | FULL GAME HIG…</td><td>75378</td><td>&quot;https://i.ytimg.com/vi/P-w7Sh1…</td><td>null</td></tr><tr><td>&quot;w74vziE2_M0&quot;</td><td>&quot;KINGS at ROCKETS | FULL GAME H…</td><td>143917</td><td>&quot;https://i.ytimg.com/vi/w74vziE…</td><td>null</td></tr><tr><td>&quot;rX_RF8OczdE&quot;</td><td>&quot;MAVERICKS at BULLS | FULL GAME…</td><td>253548</td><td>&quot;https://i.ytimg.com/vi/rX_RF8O…</td><td>2020-03-03 03:37:45</td></tr><tr><td>&quot;KxhYcljgDaE&quot;</td><td>&quot;HORNETS at 76ERS | FULL GAME H…</td><td>50558</td><td>&quot;https://i.ytimg.com/vi/KxhYclj…</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nNow, a bit of manipulation, using regexes to parse out the \"team\" and any associated metadata.\n\n::: {#cf09564f .cell execution_count=2}\n``` {.python .cell-code}\nvideo_parsed_df = df = video_df.with_columns(\n    pl.col(\"title\").str.extract(r\"^(.*?) at\", 1).str.to_titlecase().alias(\"away_team\"),\n    pl.col(\"title\")\n    .str.extract(r\"at (.*?) \\|\", 1)\n    .str.to_titlecase()\n    .alias(\"home_team\"),\n    pl.col(\"title\").str.extract(r\"\\| ([A-Za-z0-9, ]+)$\", 1).alias(\"date\"),\n)\nvideo_parsed_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (6_195, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>vid_id</th><th>title</th><th>views</th><th>thumbnail</th><th>publish_date</th><th>away_team</th><th>home_team</th><th>date</th></tr><tr><td>str</td><td>str</td><td>i64</td><td>str</td><td>datetime[μs]</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;046ws2SfuL0&quot;</td><td>&quot;THUNDER at PACERS | FULL GAME …</td><td>141419</td><td>&quot;https://i.ytimg.com/vi/046ws2S…</td><td>2021-04-22 01:30:32</td><td>&quot;Thunder&quot;</td><td>&quot;Pacers&quot;</td><td>&quot;April 21, 2021&quot;</td></tr><tr><td>&quot;q9bFgN-J4uY&quot;</td><td>&quot;SUNS at NUGGETS | FULL GAME HI…</td><td>671110</td><td>&quot;https://i.ytimg.com/vi/q9bFgN-…</td><td>null</td><td>&quot;Suns&quot;</td><td>&quot;Nuggets&quot;</td><td>&quot;January 1, 2021&quot;</td></tr><tr><td>&quot;0S2C1zvxmQQ&quot;</td><td>&quot;HORNETS at CAVALIERS | FULL GA…</td><td>747308</td><td>&quot;https://i.ytimg.com/vi/0S2C1zv…</td><td>null</td><td>&quot;Hornets&quot;</td><td>&quot;Cavaliers&quot;</td><td>&quot;December 23, 2020&quot;</td></tr><tr><td>&quot;MGQE3475CUk&quot;</td><td>&quot;CELTICS at PELICANS | FULL GAM…</td><td>136781</td><td>&quot;https://i.ytimg.com/vi/MGQE347…</td><td>null</td><td>&quot;Celtics&quot;</td><td>&quot;Pelicans&quot;</td><td>&quot;January 29, 2022&quot;</td></tr><tr><td>&quot;g19ZkFyT9UI&quot;</td><td>&quot;KINGS at GRIZZLIES | FULL GAME…</td><td>105542</td><td>&quot;https://i.ytimg.com/vi/g19ZkFy…</td><td>2021-11-29 01:28:30</td><td>&quot;Kings&quot;</td><td>&quot;Grizzlies&quot;</td><td>&quot;November 28, 2021&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Luf7EVdBfhA&quot;</td><td>&quot;Devin Booker GOES OFF For 44 P…</td><td>30218</td><td>&quot;https://i.ytimg.com/vi/Luf7EVd…</td><td>null</td><td>null</td><td>null</td><td>&quot;January 28, 2024&quot;</td></tr><tr><td>&quot;P-w7Sh1c3TM&quot;</td><td>&quot;MAGIC at HAWKS | FULL GAME HIG…</td><td>75378</td><td>&quot;https://i.ytimg.com/vi/P-w7Sh1…</td><td>null</td><td>&quot;Magic&quot;</td><td>&quot;Hawks&quot;</td><td>&quot;January 17, 2024&quot;</td></tr><tr><td>&quot;w74vziE2_M0&quot;</td><td>&quot;KINGS at ROCKETS | FULL GAME H…</td><td>143917</td><td>&quot;https://i.ytimg.com/vi/w74vziE…</td><td>null</td><td>&quot;Kings&quot;</td><td>&quot;Rockets&quot;</td><td>&quot;November 6, 2023&quot;</td></tr><tr><td>&quot;rX_RF8OczdE&quot;</td><td>&quot;MAVERICKS at BULLS | FULL GAME…</td><td>253548</td><td>&quot;https://i.ytimg.com/vi/rX_RF8O…</td><td>2020-03-03 03:37:45</td><td>&quot;Mavericks&quot;</td><td>&quot;Bulls&quot;</td><td>&quot;March 2, 2020&quot;</td></tr><tr><td>&quot;KxhYcljgDaE&quot;</td><td>&quot;HORNETS at 76ERS | FULL GAME H…</td><td>50558</td><td>&quot;https://i.ytimg.com/vi/KxhYclj…</td><td>null</td><td>&quot;Hornets&quot;</td><td>&quot;76ers&quot;</td><td>&quot;November 10, 2019&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## NBA data\n\n### Box score data\n\n### Scraping the headshots for all NBA players\n\nThe NBA makes it notoriously tricky to get headshots of old players. Twitter user [@NBA_University](https://twitter.com/NBA_University), who produces some awesome content, said he and his friends [figured out how to do this](https://twitter.com/NBA_University/status/1767927001661231222), but also said [he was gonna paywall it](https://twitter.com/NBA_University/status/1767948162746970497). Ok. I'm not gonna do that.\n\nAnyways, if you google \"nba player stats\" for any player, let's say for my boy Derrick White, it'll take you to a page [like this](https://www.nba.com/player/1628401/derrick-white). The image attached leads you to `https://cdn.nba.com/headshots/nba/latest/1040x760/1628401.png`. Pretty easy to see that this is an CDN that takes their \"player id\" and returns their latest headshot. Unfortunately, manipulating the \"latest\" to let's say, a 2023, leads to an \"access denied\" error.\n\nThankfully, I found a loophole. If you append the player's team id, documented [here](https://github.com/bttmly/nba/blob/master/data/teams.json), and then replace `latest` with the targeted year, you can find the headshot for the particular year. Here is Derrick White's 2019 headshot. `https://cdn.nba.com/headshots/nba/1610612759/2019/1040x760/1628401.png`\n\nThe upside is that headshots are now segregated by the `team id`. So Derrick White, who was traded from the San Antonio Spurs to the Boston Celtics in Feburary 2022 (which I will look on back as one of the best days of my life), has two headshots for 2021 — the San Antonio Spurs one (`https://cdn.nba.com/headshots/nba/1610612759/2021/1040x760/1628401.png`), and the Boston Celtics one (`https://cdn.nba.com/headshots/nba/1610612738/2021/1040x760/1628401.png`).\n\nSo, the solution here is surprisingly simple. Construct a list of all unique combinations of `(team_id, season, player_id)` and then hit the CDN with the preconstructed URL to get the headshots.\n\n```{.python}\nfrom pathlib import Path\nimport aiohttp\nimport aiohttp.client_exceptions\nimport polars as pl\nfrom aiohttp import ClientSession\nfrom asyncio import Semaphore, TaskGroup\nimport uvloop\n\nLIMITER = Semaphore(32)\n\nworking_dir = Path(__file__).parent.parent\ndata_dir = working_dir / \"data\"\nheadshot_dir = working_dir / \"assets\" / \"headshots\"\n\nURL_TEMPLATE = (\n    \"https://cdn.nba.com/headshots/nba/{team_id}/{year}/1040x760/{player_id}.png\"\n)\n\n\nasync def download_file(\n    session: ClientSession, player_id: int, season: str, team_id: int\n) -> None:\n    file_path = headshot_dir / season / str(team_id) / f\"{player_id}.png\"\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n    url = URL_TEMPLATE.format(team_id=team_id, year=season[:4], player_id=player_id)\n    try:\n        async with session.get(url) as resp, LIMITER:\n            with file_path.open(\"wb\") as f:\n                async for data in resp.content.iter_chunked(1024):\n                    f.write(data)\n    except aiohttp.client_exceptions.ClientResponseError as e:\n        if e.status == 403:\n            return\n        else:\n            print(f\"Error downloading {url}\")\n\n\nasync def main() -> None:\n    box_score_df = pl.read_parquet(data_dir / \"box_scores.parquet\")\n    count_df = box_score_df.group_by(\"player_id\", \"season_year\", \"team_id\").agg(\n        pl.count().alias(\"count\")\n    )\n    async with (\n        ClientSession(\n            # base_url=\"https://i.ytimg.com\"\n            raise_for_status=True,\n        ) as session,\n        TaskGroup() as tg,\n    ):\n        for row in count_df.iter_rows():\n            player_id, season, team_id, _ = row\n            tg.create_task(download_file(session, player_id, season, team_id))\n\n\nuvloop.run(main())\n\n```\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /Users/abhiagarwal/Developer/abhiaagarwal/.venv/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.8\n---\n",
    "supporting": [
      "index_files/figure-ipynb"
    ],
    "filters": []
  }
}